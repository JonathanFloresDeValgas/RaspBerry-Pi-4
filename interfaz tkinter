marshall@raspberrypi

sudo apt update 
sudo apt upgrade
sudo apt install arduino
https://dl.espressif.com/dl/package_esp32_index.json
sudo ./install.sh
arduino
sudo usermod -a -G dialout $USER

*************************************************************
Puerto Serie:
En la Raspberry Pi, el puerto serie asignado a la ESP32 probablemente será algo como /dev/ttyUSB0 o /dev/ttyACM0, en lugar de COM3. Asegúrate de identificar el puerto correcto antes de ejecutar el programa. Puedes usar el comando ls /dev/tty* en la terminal para buscar el dispositivo una vez conectada la ESP32.

Permisos del Puerto Serie:
En Linux, los usuarios necesitan permisos para acceder al puerto serie. Si obtienes un error de permisos, puedes otorgártelos temporalmente con:

bash
Copiar código
sudo chmod 666 /dev/ttyUSB0
Para hacerlo permanente, agrega tu usuario al grupo dialout:

bash
Copiar código
sudo usermod -a -G dialout $USER
Luego, cierra y vuelve a iniciar sesión.

Instalación de Python y Librerías:
Asegúrate de que las librerías tkinter y pyserial estén instaladas en la Raspberry Pi. Puedes instalarlas usando:

bash
Copiar código
sudo apt-get install python3-tk
pip3 install pyserial
Pruebas Iniciales:
Antes de ejecutar el programa completo, puedes probar si la Raspberry Pi está recibiendo datos correctamente desde la ESP32 con un script simple:

python
Copiar código
import serial

ser = serial.Serial('/dev/ttyUSB0', 115200)
while True:
    print(ser.readline().decode('utf-8').strip())
Performance:
Aunque la Raspberry Pi 4 es lo suficientemente potente para manejar la interfaz y la comunicación serie, asegúrate de no sobrecargarla con otros procesos pesados al mismo tiempo.



*********************************************************************************************



import time
import tkinter as tk
from tkinter import ttk
import serial

puerto_serie = 'COM3'
ser = serial.Serial(puerto_serie, 115200, timeout=1)

ventana = tk.Tk()
ventana.title("Control de Ventilador")
ventana.geometry("400x300")

temperatura = tk.StringVar(value="---")
humedad = tk.StringVar(value="---")
ventilador_estado = tk.StringVar(value="Apagado")
modo_ventilador = tk.StringVar(value="Automático")  # Variable para el modo

def encender_ventilador():
    ventilador_estado.set("Encendido")
    modo_ventilador.set("Manual Encendido")
    ser.write(b'ON\n')

def apagar_ventilador():
    ventilador_estado.set("Apagado")
    modo_ventilador.set("Manual Apagado")
    ser.write(b'OFF\n')

def modo_automatico():
    modo_ventilador.set("Automático")
    ser.write(b'AUTO\n')

def actualizar_datos():
    if ser:
        linea = ser.readline().decode('utf-8').strip()
        print(f"Datos recibidos: {linea}")
        if linea.startswith("temp:") and "hum:" in linea:
            try:
                partes = linea.split(',')
                temp = partes[0].split(':')[1]
                hum = partes[1].split(':')[1]
                temperatura.set(temp)
                humedad.set(hum)
            except (IndexError, ValueError) as e:
                print(f"Error procesando datos: {e}")
    ventana.after(1000, actualizar_datos)

ttk.Label(ventana, text="Temperatura (°C):").pack(pady=5)
ttk.Label(ventana, textvariable=temperatura, font=("Helvetica", 16)).pack()

ttk.Label(ventana, text="Humedad (%):").pack(pady=5)
ttk.Label(ventana, textvariable=humedad, font=("Helvetica", 16)).pack()

ttk.Label(ventana, text="Modo del Ventilador:").pack(pady=10)
ttk.Label(ventana, textvariable=modo_ventilador, font=("Helvetica", 14)).pack()

frame_botones = ttk.Frame(ventana)
frame_botones.pack(pady=20)
ttk.Button(frame_botones, text="Encender", command=encender_ventilador).grid(row=0, column=0, padx=10)
ttk.Button(frame_botones, text="Apagar", command=apagar_ventilador).grid(row=0, column=1, padx=10)
ttk.Button(frame_botones, text="Automático", command=modo_automatico).grid(row=0, column=2, padx=10)

actualizar_datos()
ventana.mainloop()

******************************************************************

Instala virtualenv si no lo tienes ya:

bash
Copiar código
sudo pip3 install virtualenv
Crea un entorno virtual:

bash
Copiar código
python3 -m venv mi_entorno
Activa el entorno virtual:

bash
Copiar código
source mi_entorno/bin/activate
Instala pyserial dentro del entorno virtual:

bash
Copiar código
pip install pyserial
Cuando termines, desactiva el entorno virtual:

bash
Copiar código
deactivate
